# Install LibreNMS
- name: Install LibreNMS w/ Nginx, MariaDB, and PHP
  hosts: all
  vars:
    librenms_password: librenms
    mysql_root_password: password
  tasks:
  
    - name: Install Repository
      yum:
        name:
          - epel-release
    
    - name: Add repository for php 7.3
      yum:
        state: present
        name: https://rpms.remirepo.net/enterprise/remi-release-7.rpm

# Install Nginx
    - name: install nginx
      yum:
        state: present
        name:
          - nginx
          
    - name: start and enable nginx
      service:
        name: nginx
        state: started
        enabled: yes
    
    - name: Install php packages
      yum:
        state: present
        enablerepo: remi-php72
        name:
          - php
          - composer
          - cronie
          - fping 
          - git
          - httpd
          - ImageMagick
          - jwhois
          - mariadb 
          - mariadb-server 
          - mtr
          - MySQL-python
          - net-snmp
          - net-snmp-utils
          - nmap
          - php-fpm
          - php-cli
          - php-common
          - php-curl
          - php-gd
          - php-mbstring
          - php-mysqlnd
          - php-process
          - php-snmp
          - php-xml
          - php-zip
          - python-memcached
          - rrdtool
          - policycoreutils-python
        state: installed
     
# Pre-req for Ansible MYSQL_DB and MYSQL_USer modules
    - name: install python pip
      yum:
        state: present
        name:
          - python-setuptools
          - python-pip
          - python-devel
          - mysql-devel
          - libsemanage-python
    
    - name: Install the Python MySQLB module
      pip:
       name: pymysql
        
# Create User      
    - name: Create LibreNMS user
      user:
        name: librenms
        createhome: no
        system: yes
        home: /opt/librenms
        state: present
        
    - name: Add nginx to librenms group
      user:
        name: nginx
        groups: librenms
        append: yes
        
    - name: check if librenms directory exists
      stat: 
        path: /opt/librenms
      register: status

    - name: Composer Create Project
      composer:
        command: create-project
        arguments: '--keep-vcs librenms/librenms librenms dev-master'
        working_dir: /opt
      when: status.stat.exists == False    

    - name: Start MariaDB
      service:
       name: mariadb 
       enabled: yes
       state: started

    - name: Create LibreNMS DB
      mysql_db: 
       name: librenms
       encoding: utf8
       collation: utf8_unicode_ci
       state: present
    
    - name: Create DB user
      mysql_user:
        name: librenms
        password: "{{ librenms_password }}"
        priv: librenms.*:ALL,GRANT
        state: present
    
    - name: check if root password for mariadb is set
      shell: >
        mysqladmin -u root status
      changed_when: false
      failed_when: false
      register: root_pwd_check

    - name: set mariadb root password for first time
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        host_all: yes
        state: present
      when: root_pwd_check.rc == 0

    - name: flush privileges
      command: 'mysql -ne "{{ item }}" -uroot -p"{{ mysql_root_password }}"'
      with_items:
        - FLUSH PRIVILEGES
      changed_when: False

    - name: Remove anonymous users
      mysql_user:
        name: ''
        host_all: yes
        login_user: root
        login_password: "{{ mysql_root_password }}"
        state: absent
     
    - name: Remove test database and access to it
      mysql_db:
        name: test
        login_user: root
        login_password: "{{ mysql_root_password }}"
        state: absent

    - name: Disallow root login remotely
      command: 'mysql -ne "{{ item }}" -uroot -p"{{ mysql_root_password }}"'
      with_items:
        - DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
      changed_when: False

    - name: flush privileges
      command: 'mysql -ne "{{ item }}" -uroot -p"{{ mysql_root_password }}"'
      with_items:
        - FLUSH PRIVILEGES
      changed_when: False
  
    - name: Add block in my.cnf
      blockinfile:
       path: /etc/my.cnf
       insertafter: '^socket'
       block: |
         innodb_file_per_table=1
         lower_case_table_names=0
           
    - name: Restart MariaDB
      systemd:
       name: mariadb 
       enabled: yes
       state: restarted
       daemon_reload: yes

    - name: DateTimezone in php.ini
      lineinfile: 
       path: /etc/php.ini
       regexp: '^;date.timezone ='
       line: 'date.timezone = America/New_York'
       state: present
    
    - name: Edit /etc/php-fpm.d/www.conf (1)
      lineinfile:
        path: /etc/php-fpm.d/www.conf
        regexp: 'user = apache'
        line: ';user = apache'
        state: present
   
    - name: Edit /etc/php-fpm.d/www.conf (2)
      lineinfile:
        path: /etc/php-fpm.d/www.conf
        insertafter: ';user = apache'
        line: 'user = nginx'
        state: present
   
    - name: Edit /etc/php-fpm.d/www.conf (3)
      lineinfile:
        path: /etc/php-fpm.d/www.conf
        regexp: 'listen = 127.0.0.1:9000'
        line: ';listen = 127.0.0.1:9000'
        state: present
    
    - name: Edit /etc/php-fpm.d/www.conf (3)
      lineinfile:
        path: /etc/php-fpm.d/www.conf
        insertafter: ';listen = 127.0.0.1:9000'
        line: 'listen = /var/run/php-fpm/php-fpm.sock'
        state: present
   
    - name: Edit /etc/php-fpm.d/www.conf (4)
      blockinfile:
       path: /etc/php-fpm.d/www.conf
       insertafter: ';listen.mode = 0660'
       block: |
          listen.owner = nginx
          listen.group = nginx
          listen.mode = 0660
    
    - name: Enable and restart PHP-FPM
      service:
        name: php-fpm
        enabled: yes
        daemon_reload: yes
        
    - name: Create  Librenms http file
      blockinfile:
        path: /etc/httpd/conf.d/librenms.conf
        create: yes
        block: |
           server {
           listen      80;
           server_name librenms.example.com;
           root        /opt/librenms/html;
           index       index.php;

           charset utf-8;
           gzip on;
           gzip_types text/css application/javascript text/javascript application/x-javascript image/svg+xml text/plain text/xsd text/xsl text/xml image/x-icon;
           location / {
            try_files $uri $uri/ /index.php?$query_string;
           }
           location /api/v0 {
            try_files $uri $uri/ /api_v0.php?$query_string;
           }
           location ~ \.php {
            include fastcgi.conf;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock;
           }
           location ~ /\.ht {
            deny all;
           }
           } 
 
    - name: Set selinux policy for directories
      sefcontext:
       target: '{{ item.target }}(/.*)?'
       setype: "{{ item.setype }}"
       state: present
      register: filecontext
      with_items:
       - { target: '/opt/librenms/logs(/.*)?', setype: 'httpd_sys_content_t' }
       - { target: '/opt/librenms/logs(/.*)?', setype: 'httpd_sys_rw_content_t' }
       - { target: '/opt/librenms/rrd(/.*)?', setype: 'httpd_sys_content_t' }
       - { target: '/opt/librenms/rrd(/.*)?', setype: 'httpd_sys_rw_content_t' }
       - { target: '/opt/librenms/storage(/.*)?', setype: 'httpd_sys_content_t' }
       - { target: '/opt/librenms/storage(/.*)?', setype: 'httpd_sys_rw_content_t' }
       - { target: '/opt/librenms/bootstrap/cache(/.*)?', setype: 'httpd_sys_content_t' }
       - { target: '/opt/librenms/bootstrap/cache(/.*)?', setype: 'httpd_sys_rw_content_t' }

    - name: Apply new SELinux file context to filesystem
      command: "restorecon -RFvv /opt/librenms/{{ item }}"
      with_items:
       - 'logs'
       - 'rrd'
       - 'storage'
       - 'bootstrap/cache'

    - name: Set httpd_can_sendmail flag on and keep it persistent across reboots
      seboolean:
       name: httpd_can_sendmail
       state: yes
       persistent: yes

    - name: Create http_ping file
      blockinfile:
        path: /opt/http_fping.tt
        create: yes
        block: |
          module http_fping 1.0;
          require {
          type httpd_t;
          class capability net_raw;
          class rawip_socket { getopt create setopt write read };
          }
          #============= httpd_t ==============
          allow httpd_t self:capability net_raw;
          allow httpd_t self:rawip_socket { getopt create setopt write read };
    
    - name: Create selinux module 
      command: "{{ item }}"
      with_items:
      - checkmodule -M -m -o /opt/http_fping.mod /opt/http_fping.tt
      - semodule_package -o /opt/http_fping.pp -m /opt/http_fping.mod
      - semodule -i /opt/http_fping.pp

    - name: remove http_fping files
      file:
       path: /opt/http_fping.{{ item }}
       state: absent
      with_items:
       - pp
       - tt
       - mod

    - name: firewalld rules
      firewalld: 
       zone: public
       service: "{{ item }}"
       permanent: yes
       immediate: yes
       state: enabled
      with_items:
       - http
       - https
    
    - name: firewall rule for 3306/tcp
      firewalld:
        port: 3306/tcp
        permanent: yes
        immediate: yes
        state: enabled
    
    - name: copy snmpd.conf
      copy:
       remote_src: yes
       src: /opt/librenms/snmpd.conf.example
       dest: /etc/snmp/snmpd.conf

  # Change the string as you wish
    - name: change community string
      replace:
       path: /etc/snmp/snmpd.conf
       regexp: 'RANDOMSTRINGGOESHERE'
       replace: 'public'

    - name: Download distro
      get_url:
       url: https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/distro
       dest: /usr/bin/distro
       mode: "+x"

    - name: Restart SNMPD
      systemd:
       name: snmpd
       enabled: yes
       state: restarted
       daemon_reload: yes

    - name: copy logrotate files
      copy:
       remote_src: yes
       src: "{{ item.src }}"
       dest: "{{ item.dest }}"
      with_items:
       - { src: '/opt/librenms/librenms.nonroot.cron', dest: '/etc/cron.d/librenms' }
       - { src: '/opt/librenms/misc/librenms.logrotate', dest: '/etc/logrotate.d/librenms' }

    - name: chown librenms
      file:
       path: /opt/librenms
       owner: librenms
       group: librenms
       recurse: yes

    - name: set acl
      acl:
       path: "/opt/librenms/{{ item }}"
       default: yes
       recursive: yes
       etype: group
       permissions: rwx 
       state: present
      with_items:
      - rrd
      - logs
      - bootstrap/cache
      - storage


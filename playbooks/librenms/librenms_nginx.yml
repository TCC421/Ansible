# Install LibreNMS
- name: Install LibreNMS w/ Nginx, MariaDB, and PHP
  hosts: all
  tasks:
  
    - name: Install Repository
      yum:
        name:
          - epel-release
    
    - name: Install LibreNMS requirements
      yum:
       name:
        - composer
        - cronie
        - fping 
        - git
        - httpd
        - ImageMagick
        - jwhois
        - mariadb 
        - mariadb-server 
        - mtr
        - MySQL-python
        - net-snmp
        - net-snmp-utils
        - nmap
        - php72w
        - php72w-cli
        - php72w-common
        - php72w-curl
        - php72w-gd
        - php72w-mbstring
        - php72w-mysqlnd
        - php72w-process
        - php72w-snmp
        - php72w-xml
        - php72w-zip
        - python-memcached
        - rrdtool
        - policycoreutils-python
       state: installed
     
# Pre-req for Ansible MYSQL_DB and MYSQL_USer modules
    - name: install python pip
      yum:
        state: present
        name:
          - python-setuptools
          - python-pip
          - python-devel
          - mysql-devel
          - libsemanage-python
    
    - name: Install the Python MySQLB module
      pip:
       name: pymysql
        
# Create User      
    - name: Create LibreNMS user
      user:
        name: librenms
        createhome: no
        system: yes
        home: /opt/librenms
        state: present
        
    - name: Add nginx to librenms group
      user:
        name: nginx
        groups: librenms
        append: yes
        
    - name: check if librenms directory exists
      stat: 
        path: /opt/librenms
      register: status

    - name: Composer Create Project
      composer:
        command: create-project
        arguments: '--keep-vcs librenms/librenms librenms dev-master'
        working_dir: /opt
      when: status.stat.exists == False    

     - name: Start MariaDB
       service:
        name: mariadb 
        enabled: yes
        state: started

     - name: Create LibreNMS DB
       mysql_db: 
        login_user: root 
        name: librenms
        encoding: utf8
        collation: utf8_unicode_ci
        state: present

      - name: Delete Test DB
        mysql_db: 
         login_user: root 
         name: test
         state: absent

      - name: Create DB user
        mysql_user:
         name: librenms
         password: librenms 
         priv: librenms.*:ALL,GRANT
         state: present
  
      - name: Add block in my.cnf
        blockinfile:
         path: /etc/my.cnf
         insertafter: '^socket'
         block: |
           innodb_file_per_table=1
           lower_case_table_names=0
           
      - name: Restart MariaDB
        systemd:
         name: mariadb 
         enabled: yes
         state: restarted
         daemon_reload: yes

      - name: DateTimezone in php.ini
        lineinfile: 
         path: /etc/php.ini
         regexp: '^;date.timezone ='
         line: 'date.timezone = Europe/Istanbul'
         state: present
         
      - name: Set selinux policy for directories
        sefcontext:
         target: '{{ item.target }}(/.*)?'
         setype: "{{ item.setype }}"
         state: present
        register: filecontext
        with_items:
         - { target: '/opt/librenms/logs(/.*)?', setype: 'httpd_sys_content_t' }
         - { target: '/opt/librenms/logs(/.*)?', setype: 'httpd_sys_rw_content_t' }
         - { target: '/opt/librenms/rrd(/.*)?', setype: 'httpd_sys_content_t' }
         - { target: '/opt/librenms/rrd(/.*)?', setype: 'httpd_sys_rw_content_t' }
         - { target: '/opt/librenms/storage(/.*)?', setype: 'httpd_sys_content_t' }
         - { target: '/opt/librenms/storage(/.*)?', setype: 'httpd_sys_rw_content_t' }
         - { target: '/opt/librenms/bootstrap/cache(/.*)?', setype: 'httpd_sys_content_t' }
         - { target: '/opt/librenms/bootstrap/cache(/.*)?', setype: 'httpd_sys_rw_content_t' }

      - name: Apply new SELinux file context to filesystem
        command: "restorecon -RFvv /opt/librenms/{{ item }}"
        with_items:
         - 'logs'
         - 'rrd'
         - 'storage'
         - 'bootstrap/cache'

      - name: Set httpd_can_sendmail flag on and keep it persistent across reboots
        seboolean:
         name: httpd_can_sendmail
         state: yes
         persistent: yes

      - name: Create http_ping file
        blockinfile:
          path: /opt/http_fping.tt
          create: yes
          block: |
            module http_fping 1.0;
            require {
            type httpd_t;
            class capability net_raw;
            class rawip_socket { getopt create setopt write read };
            }
            #============= httpd_t ==============
            allow httpd_t self:capability net_raw;
            allow httpd_t self:rawip_socket { getopt create setopt write read };
      - name: Create selinux module 
        command: "{{ item }}"
        with_items:
        - checkmodule -M -m -o /opt/http_fping.mod /opt/http_fping.tt
        - semodule_package -o /opt/http_fping.pp -m /opt/http_fping.mod
        - semodule -i /opt/http_fping.pp

      - name: remove http_fping files
        file:
         path: /opt/http_fping.{{ item }}
         state: absent
        with_items:
         - pp
         - tt
         - mod

      - name: firewalld rules
        firewalld: 
         zone: public
         service: "{{ item }}"
         permanent: yes
         immediate: yes
         state: enabled
        with_items:
         - http
         - https
